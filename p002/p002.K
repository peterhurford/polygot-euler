/    Each new term in the Fibonacci sequence is generated by adding the
/    previous two terms. By starting with 1 and 2, the first 10 terms will be:
/    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

/    By considering the terms in the Fibonacci sequence whose values do not
/    exceed four million, find the sum of the even-valued terms.

+/{x@&~x!2}(4e6>+/-2#){x,+/-2#x}/1
/
/    {x,+/-2#x} is a function that...
/    ... -2#x takes the last two elements of a passed list.
/    ... +/-2#x sums the last two elements of a passed list together.
/    ... x,y returns the passed list with y appened
/    ... therefore x,+/-2#x returns the passed list as the head and
/        appended to it the sum of the last two elements of the passed list.
/    You can see how this forms the base for the fibbonachi sequence.
/
/    (4e6>+/-2#) is a conditional.
/    ... -2# is the last two elements of a list.
/    ... +/ is sum over a list.
/    so +/-2# is to sum over the last two elements of a list.
/    ... 4e6 is 4*10^6, or 4000000 (4M)
/    ... > is greater than
/    so (4e6>+/-2#) is true while 4M is greater than the sum of the last
/       two elements of the list
/    This forms the basis for filtering to fibs smaller than 4M.
/
/    b f/x applies function f to x while b is true.
/    so (4e6>+/-2#){x,+/-2#x}/1 will apply function {x,+/-2#x} to 1 while
/        (4e6>+/-2#) is true
/    ... every time {x,+/-2#x} is applied, you get a new number in the fibbonachi
/    so this will keep generating fibbonachi numbers until 4M is greater than
/       the last two numbers in the list.
/
/    Now for {x@&~x!2}
/    x!2 is x mod 2, so this will make a list of x mod 2 for all x
/    ~ will negate the list, so non-zero becomes 0 and 0 becomes 1
/    ... meaning it will be 1 for all even numbers and 0 otherwise
/    & will create indices that return the positions of the 1s (but not the 0s)
/    x@ will return the elements of x at those indicies
/    ... so this returns a list that only has the elements that are at the indicies
/          that resolve to numbers where that number mod 2 is 0
/    or it will return a list of only the even elements, in other words.
/
/    Applying {x@&~x!2}l will filter the list l to just the even elements.
/    So {x@&~x!2}(4e6>+/-2#){x,+/-2#x}/1 will return the even fib numbers that are
/    less than 4M.
/
/    We already know that +/ is sum the list.
/    This is the easy part, and returns the sum of the even fib numbers less than 4M.
/
/    4613732
